<div id="capture_photo">

  <div id="main2" class="container" style="height: 100vh;;">  <div class="center-content" hidden>
    <!-- face_detector_selection_control -->
    <div id="face_detector_selection_control" class="row input-field">
      <select id="selectFaceDetector">
        <option value="ssd_mobilenetv1">SSD Mobilenet V1</option>
        <option value="tiny_face_detector">Tiny Face Detector</option>
        <option value="mtcnn">MTCNN</option>
      </select>
      <label>Select Face Detector</label>
    </div>
    <!-- face_detector_selection_control -->

    <!-- ssd_mobilenetv1_controls -->
    <span id="ssd_mobilenetv1_controls">
        <div class="row side-by-side">
          <div class="row">
            <label for="minConfidence">Min Confidence:</label>
            <input disabled value="0.5" id="minConfidence" type="text" class="bold">
          </div>
          <button
          class="waves-effect waves-light btn"
          onclick="onDecreaseMinConfidence()"
          >
            <i class="material-icons left">-</i>
          </button>
          <button
          class="waves-effect waves-light btn"
          onclick="onIncreaseMinConfidence()"
          >
            <i class="material-icons left">+</i>
          </button>
        </div>
      </span>
    <!-- ssd_mobilenetv1_controls -->

    <!-- tiny_face_detector_controls -->
    <span id="tiny_face_detector_controls">
        <div class="row side-by-side">
          <div class="row input-field" style="margin-right: 20px;">
            <select id="inputSize">
              <option value="" disabled selected>Input Size:</option>
              <option value="160">160 x 160</option>
              <option value="224">224 x 224</option>
              <option value="320">320 x 320</option>
              <option value="416">416 x 416</option>
              <option value="512">512 x 512</option>
              <option value="608">608 x 608</option>
            </select>
            <label>Input Size</label>
          </div>
          <div class="row">
            <label for="scoreThreshold">Score Threshold:</label>
            <input disabled value="0.5" id="scoreThreshold" type="text" class="bold">
          </div>
          <button
          class="waves-effect waves-light btn"
          onclick="onDecreaseScoreThreshold()"
          >
            <i class="material-icons left">-</i>
          </button>
          <button
          class="waves-effect waves-light btn"
          onclick="onIncreaseScoreThreshold()"
          >
            <i class="material-icons left">+</i>
          </button>
        </div>
      </span>
    <!-- tiny_face_detector_controls -->

    <!-- mtcnn_controls -->
    <span id="mtcnn_controls">
        <div class="row side-by-side">
          <div class="row">
            <label for="minFaceSize">Minimum Face Size:</label>
            <input disabled value="20" id="minFaceSize" type="text" class="bold">
          </div>
          <button
          class="waves-effect waves-light btn"
          onclick="onDecreaseMinFaceSize()"
          >
            <i class="material-icons left">-</i>
          </button>
          <button
          class="waves-effect waves-light btn"
          onclick="onIncreaseMinFaceSize()"
          >
            <i class="material-icons left">+</i>
          </button>
        </div>
      </span>
    <!-- mtcnn_controls -->

  </div>

    <h1><a href='/'> <img class="smlogo" src="/images/microhealth-logo.svg" /></a></h1>
    <h2 class="recognize_instructions">Photo</h2>
    <div class="complete_msg" id="capture_complete_msg">Must complete form!</div>
    <div onclick="open_picture()" id="open_picture"></div>
    <div class="row recognize_instructions" id="recognize_instructions">

      <div class="col-xs-12 col-sm-12" >
        <div class="col-xs-12" id="camera_msg">
          <h3 style="margin: auto;text-align: center; align-content: center;font-size: 40px">Take a picture first</h3>
        </div>
        <div class="col-xs-12" id="msg_welcome" style="display: none">
          <h3>
            Welcome Back <span id="visitor_firstname"></span>
          </h3>
        </div>
        <div id="person_image_camera" style="width: 300px;height: 270px; overflow: hidden; margin: auto"> </div>
        <div id="person_image" style="width: 300px;height: 270px; margin: auto; overflow: hidden" hidden> </div>
        <%= image_tag 'loading.gif', id: 'loading', style: 'width: 50px;   position: absolute; top: 46px;    right: 29%; display: none' %>
      </div>
      <div id="person_image_src_div" hidden>
        <input id="person_image_url">
      </div>
    </div>
    <div class="col-xs-12 col-sm-12" hidden >

      <% Visitor.where.not(avatar:nil).where("visitor_visit_informations.sign_in_date >= ? AND sign_out_date IS NULL ", 3.day.ago).
          order('visitor_visit_informations.id DESC').each do |v| %>
          <img class="inputImg" id="inputImg" src='<%= v.avatar %>' data-label="<%= v.email%>" data-name="<%= v.name %>"/>
      <% end %>
      <canvas id="overlay" />
    </div>
    <div class="row" id="capture_instructions">
      <div class="col-xs-12" id="signin_capture_msg">

      </div>
      <div class="col-xs-12" id="signout_capture_msg">
        If your face is not recognized within a minute, please enter your name in the box below.
      </div>
    </div>
    <div class="row">
      <div class="col-xs-12 col-sm-3 col-md-2">
        <label for="capture_person_name">Email:</label>
      </div>
      <div class="col-xs-12 col-sm-9 col-md-10">
        <input type="email" class="form-control" id="capture_person_email" name="capture_person_email" placeholder="name@example.com">
      </div>
      <div class="col-xs-12">
        <p><span id="capture_person_msg"></span></p>
      </div>
    </div>
    <div class="row" hidden>
      <div class="col-xs-12">
        <input type="text" class="form-control" id="person_id" name="person_id" readonly>
      </div>
    </div>


    <div class="buttonrow">
      <!--<button id="missed_btn" class="btn btn-danger">Missed</button>-->
      <button id="capture_cancel_btn" class="btn btn-warning">Cancel</button>
      <button id="capture_next_btn" class="btn btn-success">Next</button>
    </div>
  </div><!-- capture_photo  -->
  <script>

      var faceMatcher = null
      var labels = null
      var label = null
      var faceMatchers = null
      var descriptor = null


      /* TODO add processing */

      async function updateQueryImageResults() {
          $('#loading').show()
          console.log('time = '+ (new Date().getTime() / 1000))
          canvas = $('#overlay').get(0);
          console.log('time = '+ (new Date().getTime() / 1000))
          results = await faceapi.detectAllFaces($('#inputImg').get(0), getFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();
          if(results.length > 0)
          {
              console.log('time = '+ (new Date().getTime() / 1000))
              resizedResults = resizeCanvasAndResults($('#inputImg').get(0), canvas, results)
              descriptor = resizedResults[0].descriptor;
              console.log('time = '+ (new Date().getTime() / 1000))

              if (faceMatchers) { await fetch_matcher(results); }
              else{ await populate_and_fetch_matcher(results); }
          }
          else
          {
              alert('We did not detect your face. please try again')
              $( '#person_image' ).hide()
              $('#person_image_camera').show()
          }
          $('#loading').hide()
          console.log('time = '+ (new Date().getTime() / 1000))
      }

      async function fetch_matcher(){
          found = false;
          for(i=0; i<faceMatchers.length;i++)
          {
              faceMatcher = faceMatchers[i];
              found = drawFaceRecognitionResults()
              if(found)
                  break;
          }
          if(!found)
          {
              alert('Your face was not recognized. Please enter your email in the box below.')
              $('#email_row').show()
              $('#capture_next_btn').show()
          }
      }

      async function populate_and_fetch_matcher(){
          found = false;
          faceMatchers = []
          labels = []
          timer = new Date().getTime()
          for(i=0; i< $('.inputImg').length; i++)
          {
              try{
                  if (new Date().getTime() - timer < 10000){
                      imgEl = $('.inputImg').get(i);
                      label = $(imgEl).data('label')
                      name = $(imgEl).data('name')
                      const fullFaceDescriptions = await faceapi.detectAllFaces(imgEl, getFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors()
                      console.log('time = '+ (new Date().getTime() / 1000))
                      if (!fullFaceDescriptions.length) {

                      }
                      else {
                          labels.push(label)
                          faceMatcher= new faceapi.FaceMatcher(fullFaceDescriptions, 0.5)
                          for(j=0; j< faceMatcher.labeledDescriptors.length; j++)
                          {
                              faceMatcher.labeledDescriptors[j]['_label'] = label
                              faceMatcher.labeledDescriptors[j]['_name'] = name
                          }
                          faceMatchers.push(faceMatcher )
                          found = drawFaceRecognitionResults()
                          if(found)
                              break;
                      }
                  }
              }
              catch(err)
              {

              }

          }
          if(!found)
          {
              console.log('not recognized')
          }
      }

      function drawFaceRecognitionResults() {
          found = false
          best_match = faceMatcher.findBestMatch(descriptor).toString();
          label = faceMatcher.labeledDescriptors[0]['_label']
          if(best_match.indexOf(label) >= 0)
          {
              found = true;
              $('#camera_msg').hide()
              $('#msg_welcome').show()
              $('#visitor_firstname').html(faceMatcher.labeledDescriptors[0]['_name'])
              $('#capture_person_email').val(label)
          }

          return(found)
      }

      async function run() {
          await changeFaceDetector(selectedFaceDetector)
          await faceapi.loadFaceLandmarkModel('/')
          await faceapi.loadFaceRecognitionModel('/')

      }

      $(document).ready(function() {
          initFaceDetectionControls()
          run();
          initWebCam()
      })

  </script>
  <style>
    .webcamjs-ios-text{
      position: absolute;
      left: 45%;
      bottom: 35px;
    }
    .webcamjs-ios-placeholder
    {
      background-image: url('/images/camera.png');
    }
  </style>
  <script src="/js/webcam.min.js" type="text/javascript"></script>
  <script src="/js/face-api.js"></script>
  <script src="/js/commons.js"></script>
  <script src="/js/drawing.js"></script>
  <script src="/js/faceDetectionControls.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
</div>